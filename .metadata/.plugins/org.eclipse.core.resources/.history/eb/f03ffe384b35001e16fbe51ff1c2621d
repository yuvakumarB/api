package org.jsp.api.service;

import java.util.List;
import java.util.Optional;

import org.jsp.api.dao.MerchantDao;
import org.jsp.api.dao.ProductDao;
import org.jsp.api.dao.UserDao;
import org.jsp.api.dto.Merchant;
import org.jsp.api.dto.Product;
import org.jsp.api.dto.ResponseStructure;
import org.jsp.api.dto.User;
import org.jsp.api.exception.IdNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;
@Service
public class ProductService {
	@Autowired
private ProductDao dao;
	@Autowired
private MerchantDao merchantDao;

public ResponseEntity<ResponseStructure<Product>> saveProduct(@RequestBody Product product, int mid){
	ResponseStructure<Product> structure=new ResponseStructure<>();
	Optional<Merchant> recMerchant=merchantDao.findById(mid);
	if(recMerchant.isPresent()) {
		recMerchant.get().getProducts().add(product);
		product.setMerchant(recMerchant.get());
		dao.saveProduct(product);
		merchantDao.updateMerchant(recMerchant.get());
		structure.setData(product);
		structure.setStatuscode(HttpStatus.CREATED.value());
		structure.setMessage("Product added");
		return new ResponseEntity<ResponseStructure<Product>>(structure, HttpStatus.CREATED);
	}
	throw new IdNotFoundException();
}
	public ResponseEntity<ResponseStructure<Product>> updateProduct(@RequestBody Product product, int mid){
		ResponseStructure<Product> structure=new ResponseStructure<>();
		Optional<Merchant> recMerchant=merchantDao.findById(mid);
		if(recMerchant.isPresent()) {
			recMerchant.get().getProducts().add(product);
			product.setMerchant(recMerchant.get());
			structure.setData(dao.upateProduct(product));
			merchantDao.updateMerchant(recMerchant.get());
			structure.setStatuscode(HttpStatus.ACCEPTED.value());
			structure.setMessage("Product updated");
			return new ResponseEntity<ResponseStructure<Product>>(structure, HttpStatus.CREATED);
		}
		throw new IdNotFoundException();
	}
	public ResponseEntity<ResponseStructure<Product>> findById(int id){
		Optional<Product> recProduct=dao.findById(id);
		ResponseStructure<Product> structure=new ResponseStructure<>();
		if(recProduct.isPresent()) {
			structure.setData(recProduct.get());
			structure.setMessage("Product Found");
			structure.setStatuscode(HttpStatus.OK.value());
			return new ResponseEntity<ResponseStructure<Product>>(structure, HttpStatus.OK);
		}
		throw new IdNotFoundException();
	}
	public ResponseEntity<ResponseStructure<String>> deleteProduct(int id){
		ResponseStructure<String> structure=new ResponseStructure<>();
		Optional<Product> recProduct=dao.findById(id);
		if(recProduct.isPresent()) {
			dao.deleteProduct(id);
			structure.setMessage("Product deleted");
			structure.setStatuscode(HttpStatus.OK.value());
			return new ResponseEntity<ResponseStructure<String>>(structure, HttpStatus.OK);
		}
		throw new IdNotFoundException();
	}
	public ResponseEntity<ResponseStructure<List<Product>>> findProductsByMerchantId(int merchant_id){
		ResponseStructure<List<Product>> structure=new ResponseStructure<>();
		structure.setData(dao.findProductsByMerchantId(merchant_id));
		structure.setStatuscode(HttpStatus.OK.value());
		structure.setMessage("Products loaded");
		return new ResponseEntity<ResponseStructure<List<Product>>>(structure, HttpStatus.OK);
	}
	public ResponseEntity<ResponseStructure<String>> addToWishList(int product_id, int user_id){
		Optional<User> recUser =userDao.(user_id);
		Optional<Product> recProduct = dao.findById(user_id);
		ResponseStructure<String> structure=new ResponseStructure<>();
		if(recUser.isPresent() && recProduct.isPresent()) {
			recUser.get().getWishList().add(recProduct.get());
			userDao.updateUser(recUser.get());
			structure.setData("Product added to the wishList");
			structure.setMessage("user and product found");
			structure.setStatuscode(HttpStatus.ACCEPTED.value());
			return new ResponseEntity<ResponseStructure<String>>(structure, HttpStatus.ACCEPTED);
		}
		structure.setData("cannot add product to the WishList");
		structure.setMessage("Invalid user id or Product Id");
		structure.setStatuscode(HttpStatus.NOT_FOUND.value());
		return new ResponseEntity<ResponseStructure<String>>(structure, HttpStatus.NOT_FOUND);
	}
}

